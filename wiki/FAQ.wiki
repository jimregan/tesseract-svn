#summary Frequently Asked Questions

= Tesseract FAQs =

A collection of frequently asked questions and the answers, or pointers to them.


= Can't read compressed Tiff files =

I get this error message:
{{{
read_tif_image:Error:Illegal image format:Compression
}}}

Windows:
Libtiff support can be added in either VC++6 or VC++Express with the following:

{{{
Goto http://gnuwin32.sourceforge.net/packages/tiff.htm
Download and run the setup program.
Add the paths for include and library files in tools/options/directories
Add HAVE_LIBTIFF to the preprocessor definitions.
Add libtiff.lib to the list of libraries.
Rebuild.
Make libtiff3.dll be in your path somewhere.
This is done by control panel/system/advanced/environment variables and adding c:/program files/gnuwin32/bin to PATH.
Keep your fingers crossed...
}}}

Non-Windows: Install libtiff. Procedure differs from OS to OS, but on many something like
{{{
sudo apt-get install libtiff-dev
}}}
or some variant thereof should do the trick, before running configure.

= No output with color images =

There have been several bug reports of blank or garbage output with color images, both with and without libtiff. Here is the most up-to-date information (last update 23 Sep 2008):

Without libtiff, Tesseract only reads uncompressed tiff files. Even then it won't read 32 bit tiff files correctly. Will be fixed in 2.04.

With libtiff, Tesseract reads compressed tiff files, but can't handle *any* color: 24 or 32 bit. It can only read 1 bit binary images or 8 bit greyscale. (No color maps!) Will be fixed in 2.04.

The API (TessBaseAPI) should be OK with 1, 8, 24 or 32 bit images.

= Does it support multi-page tiff files? =

Only with 2.03 and later, and only if you have libtiff installed. See Compressed Tiff above.

= How do I Edit Box files used in training? =

Use bbtesseract. See http://code.google.com/p/bbtesseract/ and http://groups.google.com/group/bbtesseract

Alternatively,  http://code.google.com/p/wx-tetra/ has another application for editing box files.

= How do I recognize only digits? =

Use
{{{
TessBaseAPI::SetVariable("tessedit_char_whitelist", "0123456789");
}}}
BEFORE calling an Init function or put this in a text file called `tessdata/configs/digits`:
{{{
tessedit_char_whitelist 0123456789
}}}
and then your command line becomes:
{{{
tesseract image.tif outputbase nobatch digits
}}}
*Warning:* Until the old and new config variables get merged, you *must* have the `nobatch` parameter too.

= Is there a Minimum Text Size? (It won't read screen text!) =

There is a minimum text size for reasonable accuracy. You have to consider resolution as well as point size. Accuracy drops off below 10pt x 300dpi, rapidly below 8pt x 300dpi. A quick check is to count the pixels of the x-height of your characters. (X-height is the height of the lower case x.) At 10pt x 300dpi x-heights are typically about 20 pixels, although this can vary dramatically from font to font. Below an x-height of 10 pixels, you have very little chance of accurate results, and below about 8 pixels, most of the text will be "noise removed".

= How do I generate the language data files? =

Read the TrainingTesseract wiki.

= How do I provide my own dictionary? =

Easy: Replace `tessdata/eng.user-words` with your own word list, in the same format - UTF8 text, one word per line.

More difficult, but better for a large dictionary: Replace `tessdata/eng.word-dawg` with one created from your own word list, using wordlist2dawg. See the TrainingTesseract wiki page for details.

= wordlist2dawg doesn't work! =

There is a memory problem with the 2.03 wordlist2dawg. If you don't have something more than 1GB of memory, then your system grinds to a halt and it runs very slowly.
Reduce both max_num_edges and reserved_edges by a factor of 10 at line 39-40 of training/wordlist2dawg.cpp and rebuild.


= What are configs and how can I have more? =

Config is an overloaded word in tesseract. One meaning is a file of control parameters used for debugging or modifying its behaviour, such as tessdata/configs/segdemo.

The other meaning is used in training and in the classifier:

A config represents a (potentially) different shape of a character from a different font. The MAX_NUM_CONFIGS limit applies to the number of different files on the command line of mftraiing containing samples of any one character, as each file is assumed to represent a different font. There is currently (2.03) a limit of 32 configs. You can get away with more than 32 files on the mftraining command line if not all the files contain all the characters.

Other ways to fix the problem:

If files contain very similar looking samples, then you can cat them together to make a single file to reduce the total number of files. DON'T do this if the characters in two files look very different.

Increase MAX_NUM_CONFIGS (in classify/intproto.h) There are consequences. You will make inttemp files generated with a different value of MAX_NUM_CONFIGS unreadable. We are working towards overcoming this weakness for version 3.0. Will not be in 2.04 though. Also, classification will be slower and use more memory.



= My question isn't in here! =

Try searching the forum: http://groups.google.com/group/tesseract-ocr as your question may have come up before even if it is not listed here.